name: Publish latest release

on:
  push:
    branches:
      - master
      - main

jobs:
  create-release:
    if: contains( join( github.event.commits.*.message, ', ' ), '[ci release]' )
    runs-on: ubuntu-latest
    outputs:
      tag: v${{ steps.npm-version.outputs.version }}

    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v3

      - name: "Get release version"
        id: npm-version
        run: |
          echo ::set-output name=version::$(cat package.json | grep version | head -1 | awk -F: '{ print $2 }' | sed 's/[",]//g' | tr -d '[[:space:]]')

      - name: "Tag latest commit"
        run: |
          echo "${{ secrets.pat_token }}" | gh auth login --with-token
          gh auth setup-git
          git config user.name "GitHub Actions"
          git tag "v${{ steps.npm-version.outputs.version }}" -a -m "${{ github.event.commits[0].message }}"
          git push origin "v${{ steps.npm-version.outputs.version }}"

      - name: "Create draft GitHub release"
        run: |
          gh release create -d --generate-notes "v${{ steps.npm-version.outputs.version }}"

  build-app:
    strategy:
      matrix:
        os: [ windows-latest, macos-latest, ubuntu-latest ]
        include:
          - os: windows-latest
            target: windows
            artifact: |
              dist\*.exe

          - os: macos-latest
            target: mac
            artifact: |
              dist/*.dmg

          - os: ubuntu-latest
            target: linux
            artifact: |
              dist/*.snap
              dist/*.AppImage

    runs-on: ${{ matrix.os }}
    needs: create-release

    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v3

      - name: "Install node"
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: "Cache dependencies"
        uses: actions/cache@v3.0.1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: "Build app"
        run: |
          npm ci
          npm run clean
          npm run bundle
          npm run dist:${{ matrix.target }}

      - name: "Store artifacts"
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}-artifacts
          path: ${{ matrix.artifact }}
          if-no-files-found: error
          retention-days: 3

  add-release-artifacts:
    runs-on: ubuntu-latest
    needs: [ create-release, build-app ]

    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v3

      - name: "Fetch Windows artifacts"
        uses: actions/download-artifact@v3
        with:
          name: windows-artifacts
          path: ./windows-artifacts

      - name: "Fetch macOS artifacts"
        uses: actions/download-artifact@v3
        with:
          name: mac-artifacts
          path: ./mac-artifacts

      - name: "Fetch Linux artifacts"
        uses: actions/download-artifact@v3
        with:
          name: linux-artifacts
          path: ./linux-artifacts

      - name: "Show artifacts"
        run: |
          ls -larth windows-artifacts
          ls -larth mac-artifacts
          ls -larth linux-artifacts

      - name: "Add artifacts to release"
        run: |
          echo "${{ secrets.pat_token }}" | gh auth login --with-token
          gh auth setup-git
          git config user.name "GitHub Actions"
          gh release upload "${{ needs.create-release.outputs.tag }}" \
            windows-artifacts/*.exe \
            mac-artifacts/*.dmg \
            linux-artifacts/*.AppImage \
            linux-artifacts/*.snap \
